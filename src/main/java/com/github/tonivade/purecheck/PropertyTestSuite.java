/*
 * Copyright (c) 2020-2023, Antonio Gabriel Mu√±oz Conejo <antoniogmc at gmail dot com>
 * Distributed under the terms of the MIT License
 */
package com.github.tonivade.purecheck;

import static com.github.tonivade.purefun.core.Precondition.checkNonEmpty;
import static com.github.tonivade.purefun.core.Precondition.checkNonNull;
import static com.github.tonivade.purefun.typeclasses.Instances.traverse;
import java.util.concurrent.Executor;

import com.github.tonivade.purefun.Kind;
import com.github.tonivade.purefun.Witness;
import com.github.tonivade.purefun.concurrent.Future;
import com.github.tonivade.purefun.data.NonEmptyList;
import com.github.tonivade.purefun.data.Sequence;
import com.github.tonivade.purefun.data.SequenceOf;
import com.github.tonivade.purefun.data.Sequence_;
import com.github.tonivade.purefun.typeclasses.Parallel;

/**
 * It defines a property test suite that is composed by a non-empty collection of test cases
 *
 * It allows to run the tests serialized one by one with {@code #run()} of in parallel with {@code #parRun(Executor)}
 *
 * @author tonivade
 *
 * @param <F> type of the kind
 * @param <E> type of the error
 */
public abstract class PropertyTestSuite<F extends Witness, E> {

  private final Parallel<F, F> parallel;
  private final String name;
  private final Sequence<PropertyTestCase<F, E, ?, ?>> tests;

  /**
   * It will throw {@code NullPointerException} if the tests is null
   *
   * @param parallel parallel instance for type F
   * @param name name of the suite
   * @param tests list of tests
   */
  protected PropertyTestSuite(Parallel<F, F> parallel, String name, NonEmptyList<PropertyTestCase<F, E, ?, ?>> tests) {
    this.parallel = checkNonNull(parallel);
    this.name = checkNonEmpty(name);
    this.tests = checkNonNull(tests);
  }

  /**
   * It runs the suite in the given effect of the test and creates a test results
   *
   * @return the result of the suite
   */
  public Kind<F, Report<E>> runK() {
    var sequence = traverse(Sequence_.class).sequence(parallel.monad(), tests.map(PropertyTestCase::run));

    var results = parallel.monad().map(sequence, SequenceOf::narrowK);

    return parallel.monad().map(results, xs -> new Report<>(name, xs));

  }

  public Kind<F, Report<E>> runParK() {
    var sequence = parallel.parSequence(traverse(Sequence_.class), tests.map(PropertyTestCase::run));

    var results = parallel.monad().map(sequence, SequenceOf::narrowK);

    return parallel.monad().map(results, xs -> new Report<>(name, xs));
  }

  /**
   * It runs the suite one by one
   *
   * @return the result of the suite
   */
  public abstract Report<E> run();

  /**
   * It runs the suite in parallel using the default executor
   *
   * @return a future with the result of the suite
   */
  public Future<Report<E>> parRun() {
    return parRun(Future.DEFAULT_EXECUTOR);
  }

  /**
   * It runs the suite in parallel using the given {@code Executor}
   *
   * @param executor executor on which the suite is going to be executed
   * @return a future with the result of the suite
   */
  public abstract Future<Report<E>> parRun(Executor executor);

  /**
   * It describes the report generated by a test suite.
   *
   * @author tonivade
   *
   * @param <E> type of the error generated by the tests
   */
  public static class Report<E> {

    private final String name;
    private final Sequence<TestSuite.Report<E>> reports;

    public Report(String name, Sequence<TestSuite.Report<E>> reports) {
      this.name = checkNonEmpty(name);
      this.reports = checkNonNull(reports);
    }

    public void assertion() {
      try {
        reports.forEach(TestSuite.Report::assertion);
      } finally {
        System.out.println(this);
      }
    }

    @Override
    public String toString() {
      return reports.join("\n\n", "# " + name + "\n\n", "\n");
    }
  }
}
